generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String  @id @default(cuid())
  displayName String?
  email       String  @unique
  avatarUrl   String?

  lastLogin DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  planId             PlanId?
  customerId         String?
  subscriptionId     String?
  subscriptionStatus SubscriptionStatus?
  currentPeriodEnd   DateTime?

  accounts Account[]

  File    File[]
  Message Message[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text

  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  tokenType    String?
  scope        String?
  idToken      String? @db.Text
  sessionState String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

enum PlanId {
  free
  pro
}

enum SubscriptionStatus {
  active
  canceled
  trialing
  unpaid
  paused
}

enum AuthProvider {
  GOOGLE
  GITHUB
}

enum UploadStatus {
  PROCESSING
  SUCCESS
  FAILED_TOO_LARGE
  FAILED_TOO_MANY_PAGES
  FAILED_UNKNOWN
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PROCESSING)

  key String @unique
  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages Message[]
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fileId String?
  File   File?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
}
