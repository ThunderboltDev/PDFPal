generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma-client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SubscriptionStatus {
  PAID
  ACTIVE
  CANCELLED
  EXPIRED
  UNPAID
}

model User {
  id    String  @id @default(cuid())
  name  String?
  image String?
  email String  @unique

  lastLogin DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId       String?
  subscriptionId   String?
  currentPeriodEnd DateTime?

  accounts Account[]
  sessions Session[]

  File    File[]
  Message Message[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  userAgent String?
  timezone  String?
  country   String?
  city      String?

  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum AuthProvider {
  GOOGLE
  GITHUB
}

enum UploadStatus {
  PROCESSING
  SUCCESS
  FAILED_TOO_LARGE
  FAILED_TOO_MANY_PAGES
  FAILED_UNKNOWN
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PROCESSING)

  key String @unique
  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages Message[]
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fileId String?
  File   File?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
}
